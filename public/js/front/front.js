/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/front.js":
/*!*******************************!*\
  !*** ./resources/js/front.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("__webpack_require__(/*! ./tinymce */ \"./resources/js/tinymce.js\");\n\n$(document).ready(function ($) {\n  $(\"[data-bs-toggle='tooltip']\").tooltip();\n  var selectGame = $('.js-single-game');\n  selectGame.select2({\n    placeholder: 'Select a game'\n  });\n  var listTag = $('.js-add-server-tag');\n  listTag.select2({\n    placeholder: 'Select tags'\n  });\n\n  var _token = $('input[name=\"_token\"]').val();\n\n  selectGame.on('change', function (e) {\n    e.preventDefault();\n    $.ajaxSetup({\n      headers: {\n        'X-CSRF-TOKEN': _token\n      }\n    });\n    var id = $('.js-single-game option:selected').val();\n    $.ajax({\n      url: \"/my-account/getGameTags/\" + id,\n      type: \"post\",\n      data: {\n        id: id,\n        _token: _token\n      },\n      success: function success(res) {\n        $('.js-add-server-tag option').remove();\n        $.each(res.success, function (i, item) {\n          listTag.append($('<option>', {\n            value: item.id,\n            text: item.name\n          }));\n        });\n      }\n    });\n  });\n  var listHost = $('.js-add-server-host');\n  listHost.select2({\n    placeholder: 'Select Country'\n  });\n  var listLang = $('.js-add-server-lang');\n  listLang.select2({\n    placeholder: 'Select Languages'\n  }); // Vide les champs\n\n  if (!$('form').hasClass('js-server-edit')) {\n    selectGame.val(null).trigger('change');\n    listHost.val(null).trigger('change');\n    listLang.val(null).trigger('change');\n  } // EDIT SERVER\n\n\n  $('.js-edit-server-tag').select2({\n    placeholder: 'Select tags'\n  }); // CLICK SERVER\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LENBQUMsQ0FBQyxxQkFBRCxDQUFELENBQXlCSyxPQUF6QixDQUFpQztBQUM3QkMsSUFBQUEsV0FBVyxFQUFFO0FBRGdCLEdBQWpDLEVBekQwQixDQStEMUI7QUFDSCxDQWhFRCIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9mcm9udC5qcz84NjFhIl0sInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJy4vdGlueW1jZScpO1xuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oJCkge1xuICAgICQoXCJbZGF0YS1icy10b2dnbGU9J3Rvb2x0aXAnXVwiKS50b29sdGlwKCk7XG5cbiAgICBsZXQgc2VsZWN0R2FtZSA9ICQoJy5qcy1zaW5nbGUtZ2FtZScpO1xuICAgICAgICBzZWxlY3RHYW1lLnNlbGVjdDIoe1xuICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdTZWxlY3QgYSBnYW1lJ1xuICAgICAgICB9KTtcbiAgICBsZXQgbGlzdFRhZyA9ICQoJy5qcy1hZGQtc2VydmVyLXRhZycpXG4gICAgICAgIGxpc3RUYWcuc2VsZWN0Mih7XG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogJ1NlbGVjdCB0YWdzJ1xuICAgICAgICB9KTtcblxuICAgIGxldCBfdG9rZW4gPSAkKCdpbnB1dFtuYW1lPVwiX3Rva2VuXCJdJykudmFsKClcbiAgICBzZWxlY3RHYW1lLm9uKCdjaGFuZ2UnLGZ1bmN0aW9uKGUpe1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICQuYWpheFNldHVwKHtcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAnWC1DU1JGLVRPS0VOJzogX3Rva2VuXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgaWQgPSAkKCcuanMtc2luZ2xlLWdhbWUgb3B0aW9uOnNlbGVjdGVkJykudmFsKClcbiAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgIHVybDogXCIvbXktYWNjb3VudC9nZXRHYW1lVGFncy9cIiArIGlkLFxuICAgICAgICAgICAgdHlwZTogXCJwb3N0XCIsXG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgICAgICAgIF90b2tlbjogX3Rva2VuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzKXtcbiAgICAgICAgICAgICAgICAkKCcuanMtYWRkLXNlcnZlci10YWcgb3B0aW9uJykucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgJC5lYWNoKHJlcy5zdWNjZXNzLCAoaSwgaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsaXN0VGFnLmFwcGVuZCgkKCc8b3B0aW9uPicsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBpdGVtLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCA6IGl0ZW0ubmFtZVxuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgbGV0IGxpc3RIb3N0ID0gJCgnLmpzLWFkZC1zZXJ2ZXItaG9zdCcpO1xuICAgIGxpc3RIb3N0LnNlbGVjdDIoe1xuICAgICAgICBwbGFjZWhvbGRlcjogJ1NlbGVjdCBDb3VudHJ5JyxcbiAgICB9KTtcbiAgICBsZXQgbGlzdExhbmcgPSAkKCcuanMtYWRkLXNlcnZlci1sYW5nJyk7XG4gICAgbGlzdExhbmcuc2VsZWN0Mih7XG4gICAgICAgIHBsYWNlaG9sZGVyOiAnU2VsZWN0IExhbmd1YWdlcycsXG4gICAgfSk7XG5cbiAgICAvLyBWaWRlIGxlcyBjaGFtcHNcbiAgICBpZiAoISQoJ2Zvcm0nKS5oYXNDbGFzcygnanMtc2VydmVyLWVkaXQnKSkge1xuICAgICAgICBzZWxlY3RHYW1lLnZhbChudWxsKS50cmlnZ2VyKCdjaGFuZ2UnKTtcbiAgICAgICAgbGlzdEhvc3QudmFsKG51bGwpLnRyaWdnZXIoJ2NoYW5nZScpO1xuICAgICAgICBsaXN0TGFuZy52YWwobnVsbCkudHJpZ2dlcignY2hhbmdlJyk7XG4gICAgfVxuXG4gICAgLy8gRURJVCBTRVJWRVJcbiAgICAkKCcuanMtZWRpdC1zZXJ2ZXItdGFnJykuc2VsZWN0Mih7XG4gICAgICAgIHBsYWNlaG9sZGVyOiAnU2VsZWN0IHRhZ3MnXG4gICAgfSk7XG5cblxuXG4gICAgLy8gQ0xJQ0sgU0VSVkVSXG59KTtcbiJdLCJuYW1lcyI6WyJyZXF1aXJlIiwiJCIsImRvY3VtZW50IiwicmVhZHkiLCJ0b29sdGlwIiwic2VsZWN0R2FtZSIsInNlbGVjdDIiLCJwbGFjZWhvbGRlciIsImxpc3RUYWciLCJfdG9rZW4iLCJ2YWwiLCJvbiIsImUiLCJwcmV2ZW50RGVmYXVsdCIsImFqYXhTZXR1cCIsImhlYWRlcnMiLCJpZCIsImFqYXgiLCJ1cmwiLCJ0eXBlIiwiZGF0YSIsInN1Y2Nlc3MiLCJyZXMiLCJyZW1vdmUiLCJlYWNoIiwiaSIsIml0ZW0iLCJhcHBlbmQiLCJ2YWx1ZSIsInRleHQiLCJuYW1lIiwibGlzdEhvc3QiLCJsaXN0TGFuZyIsImhhc0NsYXNzIiwidHJpZ2dlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/front.js\n");

/***/ }),

/***/ "./resources/js/tinymce.js":
/*!*********************************!*\
  !*** ./resources/js/tinymce.js ***!
  \*********************************/
/***/ (() => {

eval("// function example_image_upload_handler (blobInfo, success, failure, progress) {\n//     let xhr, formData;\n//\n//     xhr = new XMLHttpRequest();\n//     xhr.withCredentials = false;\n//     xhr.open('POST', 'image/upload');\n//     xhr.setRequestHeader('X-CSRF-TOKEN', $('meta[name=\"csrf-token\"]').attr('content'))\n//\n//     xhr.upload.onprogress = function (e) {\n//         progress(e.loaded / e.total * 100);\n//     };\n//\n//     xhr.onload = function() {\n//         let json;\n//\n//         if (xhr.status === 403) {\n//             failure('HTTP Error: ' + xhr.status, { remove: true });\n//             return;\n//         }\n//\n//         if (xhr.status < 200 || xhr.status >= 300) {\n//             failure('HTTP Error: ' + xhr.status);\n//             return;\n//         }\n//\n//         json = JSON.parse(xhr.responseText);\n//\n//         if (!json || typeof json.location != 'string') {\n//             failure('Invalid JSON: ' + xhr.responseText);\n//             return;\n//         }\n//\n//         success(json.location);\n//     };\n//\n//     xhr.onerror = function () {\n//         failure('Image upload failed due to a XHR Transport error. Code: ' + xhr.status);\n//     };\n//\n//     formData = new FormData();\n//     formData.append('file', blobInfo.blob(), blobInfo.filename());\n//     formData.append('slug', $('.tinymce').data('sid'));\n//\n//     console.log(formData);\n//     xhr.send(formData);\n// }\ntinymce.init({\n  selector: '.tinymce',\n  plugins: 'image code',\n  toolbar: 'undo redo | link image | code',\n  images_file_types: 'jpg,gif,png',\n  block_unsupported_drop: true,\n\n  /* enable title field in the Image dialog*/\n  image_title: true,\n\n  /* enable automatic uploads of images represented by blob or data URIs*/\n  automatic_uploads: true,\n  images_upload_url: 'image/upload',\n\n  /*\n    URL of our upload handler (for more details check: https://www.tiny.cloud/docs/configure/file-image-upload/#images_upload_url)\n    images_upload_url: 'postAcceptor.php',\n    here we add custom filepicker only to Image dialog\n  */\n  file_picker_types: 'image',\n\n  /* and here's our custom image picker*/\n  file_picker_callback: function file_picker_callback(cb, value, meta) {\n    var input = document.createElement('input');\n    input.setAttribute('type', 'file');\n    input.setAttribute('accept', 'image/*');\n    /*\n      Note: In modern browsers input[type=\"file\"] is functional without\n      even adding it to the DOM, but that might not be the case in some older\n      or quirky browsers like IE, so you might want to add it to the DOM\n      just in case, and visually hide it. And do not forget do remove it\n      once you do not need it anymore.\n    */\n\n    input.onchange = function () {\n      var file = this.files[0];\n      var reader = new FileReader();\n\n      reader.onload = function () {\n        /*\n          Note: Now we need to register the blob in TinyMCEs image blob\n          registry. In the next release this part hopefully won't be\n          necessary, as we are looking to handle it internally.\n        */\n        var id = 'blobid' + new Date().getTime();\n        var blobCache = tinymce.activeEditor.editorUpload.blobCache;\n        var base64 = reader.result.split(',')[1];\n        var blobInfo = blobCache.create(id, file, base64);\n        blobCache.add(blobInfo);\n        /* call the callback and populate the Title field with the file name */\n\n        cb(blobInfo.blobUri(), {\n          title: file.name\n        });\n      };\n\n      reader.readAsDataURL(file);\n    };\n\n    input.click();\n  },\n  content_style: 'body { font-family:Helvetica,Arial,sans-serif; font-size:14px }' // images_upload_handler: example_image_upload_handler\n\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/tinymce.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/js/front.js");
/******/ 	
/******/ })()
;